.index {
    @include flexbox();
    @include flex-wrap(wrap);
  }
  
  // Home page sections are set to flex so that half sizes may sit side-by-side
  .index-sections,
  .page-blocks {
    @include flexbox();
    @include flex-wrap(wrap);
    @include justify-content(center);
    width: 100%;
  }
  
  // Controls the width and spacing of each section - the class ".shopify-section" is generated by Shopify and applied to each element (along with unique ID) - uses CSS variables which are set in liquid files
  .shopify-section {
    width: 100%;
    @include respond-to('small-down') {
      width: 100% !important;
      padding-left: 0 !important; // Ignores padding set on larger screen sizes
      padding-right: 0 !important; // Ignores padding set on larger screen sizes
    }
  }
  
  // Handles the background color and margins depending on what width has been chosen
  .section {
    max-width: $site-max-width;
    width: $site-width;
    margin-left: auto;
    margin-right: auto;
    @media (max-width: 767px) {
      width: 100%;
    }
  
    &.has-background {
      width: calc(#{$site-width} - #{$gutter});
      max-width: calc(#{$site-max-width} - #{$gutter});
      padding-left: calc(#{$gutter} / 2);
      padding-right: calc(#{$gutter} / 2);
    }
  
    &.is-width-half {
      height: 100%;
      @include flexbox();
      @include align-items(center);
      width: 100%;
      max-width: none;
  
      @include respond-to('medium-down') {
        width: 100%;
      }
  
      .container.small-down--has-limit {
        @include respond-to('small-down') {
          max-width: $site-max-width;
          width: $site-width;
        }
      }
  
    }
  
    &.is-width-wide {
      width: 100%;
      max-width: none;
  
      .container.has-limit {
        max-width: $site-max-width;
        width: $site-width;
  
        @include respond-to('small-down') {
          width: 100%;
        }
  
      }
  
      .container.small-down--has-limit {
        @include respond-to('small-down') {
          max-width: $site-max-width;
          width: $site-width;
        }
      }
  
    }
  }
  
  .section.section__wrapper {
    @include respond-to('small-down') {
      max-width: $site-max-width;
      width: $site-width;
    }
  }
  
// Parent container for column elements - uses flexbox, so this container can be made smaller and the columns will shrink in relation

.container {
  position: relative;
  margin: 0 auto;

  @include flexbox();
  @include flex-wrap(wrap);

  .column,
  .columns {
    margin-left: calc(#{$gutter} / 2);
    margin-right: calc(#{$gutter} / 2);
  }

  &.is-small {
    width: 50%;

    @include respond-to('small-down') {
      width: 60%;
    }
  }

  &.is-medium {
    width: 70%;

    @include respond-to('small-down') {
      width: 80%;
    }
  }

  // Adds padding to bottom of columns - used for grid-type layouts

  &.has-column-padding-bottom {
    .column,
    .columns {
      margin-bottom: $gutter;
    }
  }

}

// Applies flex styling for columns created using Content Creator
.row {
  @include flexbox();
  @include flex-wrap(wrap);
  margin-bottom: $gutter;

  .column,
  .columns {
    @include respond-to('medium-down') {
      width: 100%;
      margin-left: 0;
      margin-right: 0;
    }
  }

}

[class*="offset-by"] {
  position: relative;

  @include respond-to('small-down') {
    position: static;
  }
}

// Add gutter on mobile devices
.has-gutter-enabled .has-gutter--mobile {
  @include respond-to('medium-down') {
    margin-bottom: $gutter;
  }
}

// Add gutter when blocks drop to second row
.has-gutter-enabled.has-multirow-blocks .has-gutter {
  margin-bottom: $gutter;
}



/*================ Build Base Grid Classes ================*/
@include container-column-generator();
@include responsive-display-helper();
@include responsive-text-align-helper();

/*============================================================================
  Generate breakpoint-specific column widths and push classes
    - Default column widths: $breakpoint-has-widths: ($small, $medium-up);
    - Default is no push classes
    - Will not work if `styles/global/grid.scss` is removed
==============================================================================*/
$breakpoint-has-widths: ($large-down, $medium-down, $small-down);
$breakpoint-has-push: ();

/*================ Build Responsive Grid Classes ================*/
@each $breakpoint in $breakpoint-has-widths {
  @include respond-to($breakpoint) {
    @include container-column-generator('#{$breakpoint}--');
    @include responsive-display-helper('#{$breakpoint}--');
    @include responsive-text-align-helper('#{$breakpoint}--');
  }
}

/*================ Build Grid Push Classes ================*/
@each $breakpoint in $breakpoint-has-push {
  @include respond-to($breakpoint) {
    @include grid-push-generator('#{$breakpoint}--');
  }
}